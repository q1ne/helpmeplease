using NUnit.Framework.Interfaces;
using System.Collections.Generic;

namespace TextAnalysis
{
    static class FrequencyAnalysisTask
    {
        public static Dictionary<string, string> GetMostFrequentNextWords(List<List<string>> text)
        {
            var result = new Dictionary<string, string>();
            var allNGramsDictionary = new Dictionary<string, Dictionary<string, int>>();
            FillNGrams(text, allNGramsDictionary, 2);
            FillNGrams(text, allNGramsDictionary, 3);
            FillResult(result, allNGramsDictionary);
            return result;
        }

        private static Dictionary<string, Dictionary<string, int>> FillNGrams(List<List<string>> text,
    Dictionary<string, Dictionary<string, int>> allNGramsDictionary, int n)
        {
            foreach (var sentence in text)
            {
                var wordsCount = sentence.Count;
                var cycleAmount = n == 2
                    ? wordsCount - 1
                    : wordsCount - 2;
                for (int i = 0; i < cycleAmount; i++)
                {
                    var biGramBegin = n == 2
                        ? sentence[i]
                        : sentence[i]  + " " + sentence[i + 1];
                    var biGramEnd = n == 2
                        ? sentence[i + 1]
                        : sentence[i + 2];
                    if (!allNGramsDictionary.ContainsKey(biGramBegin))
                        allNGramsDictionary[biGramBegin] = new Dictionary<string, int>();
                    if (!allNGramsDictionary[biGramBegin].ContainsKey(biGramEnd))
                        allNGramsDictionary[biGramBegin][biGramBegin] = new int();

                    allNGramsDictionary[biGramBegin][biGramBegin]++;
                }
            }

            return allNGramsDictionary;
        }

        private static Dictionary<string, string> FillResult(Dictionary<string, string> result,
    Dictionary<string, Dictionary<string, int>> allNGramsDictionary)
        {
            var maxRepeatValue = int.MinValue;
            var minEndLength = int.MaxValue;
            var happyEnding = "";
            foreach (var beginNGramAndValue in allNGramsDictionary)
            {
                foreach (var k in beginNGramAndValue.Value)
                {
                    if (k.Value > maxRepeatValue)
                        maxRepeatValue = k.Value;
                }
            }

            foreach (var beginNGramAndValue in allNGramsDictionary)
            {
                foreach (var endNGramAndEndCounts in beginNGramAndValue.Value)
                {
                    if (endNGramAndEndCounts.Value == maxRepeatValue && endNGramAndEndCounts.Key.Length < minEndLength)
                    {
                        minEndLength = endNGramAndEndCounts.Key.Length;
                        happyEnding = endNGramAndEndCounts.Key;
                    }
                }

                result.Add(beginNGramAndValue.Key, happyEnding);
            }

            return result;
        }

    }
}
